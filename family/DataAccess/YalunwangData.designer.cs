#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="family")]
	public partial class YalunwangDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCityZone(CityZone instance);
    partial void UpdateCityZone(CityZone instance);
    partial void DeleteCityZone(CityZone instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyType(CompanyType instance);
    partial void UpdateCompanyType(CompanyType instance);
    partial void DeleteCompanyType(CompanyType instance);
    partial void Insertconsumption(consumption instance);
    partial void Updateconsumption(consumption instance);
    partial void Deleteconsumption(consumption instance);
    partial void InsertconsumType(consumType instance);
    partial void UpdateconsumType(consumType instance);
    partial void DeleteconsumType(consumType instance);
    partial void Insertfinan(finan instance);
    partial void Updatefinan(finan instance);
    partial void Deletefinan(finan instance);
    partial void Insertfinanplan(finanplan instance);
    partial void Updatefinanplan(finanplan instance);
    partial void Deletefinanplan(finanplan instance);
    partial void InsertMoodofconsum(Moodofconsum instance);
    partial void UpdateMoodofconsum(Moodofconsum instance);
    partial void DeleteMoodofconsum(Moodofconsum instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertSaraly(Saraly instance);
    partial void UpdateSaraly(Saraly instance);
    partial void DeleteSaraly(Saraly instance);
    partial void InsertSmallArea(SmallArea instance);
    partial void UpdateSmallArea(SmallArea instance);
    partial void DeleteSmallArea(SmallArea instance);
    partial void Insertsummary(summary instance);
    partial void Updatesummary(summary instance);
    partial void Deletesummary(summary instance);
    partial void InsertUsergroup(Usergroup instance);
    partial void UpdateUsergroup(Usergroup instance);
    partial void DeleteUsergroup(Usergroup instance);
    partial void InsertYearMonth(YearMonth instance);
    partial void UpdateYearMonth(YearMonth instance);
    partial void DeleteYearMonth(YearMonth instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void InsertUserCompany(UserCompany instance);
    partial void UpdateUserCompany(UserCompany instance);
    partial void DeleteUserCompany(UserCompany instance);
    #endregion
		
		public YalunwangDataDataContext() : 
				base(global::DataAccess.Properties.Settings.Default.familyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public YalunwangDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YalunwangDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YalunwangDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YalunwangDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<CityZone> CityZone
		{
			get
			{
				return this.GetTable<CityZone>();
			}
		}
		
		public System.Data.Linq.Table<Company> Company
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyType> CompanyType
		{
			get
			{
				return this.GetTable<CompanyType>();
			}
		}
		
		public System.Data.Linq.Table<consumption> consumption
		{
			get
			{
				return this.GetTable<consumption>();
			}
		}
		
		public System.Data.Linq.Table<consumType> consumType
		{
			get
			{
				return this.GetTable<consumType>();
			}
		}
		
		public System.Data.Linq.Table<finan> finan
		{
			get
			{
				return this.GetTable<finan>();
			}
		}
		
		public System.Data.Linq.Table<finanplan> finanplan
		{
			get
			{
				return this.GetTable<finanplan>();
			}
		}
		
		public System.Data.Linq.Table<Moodofconsum> Moodofconsum
		{
			get
			{
				return this.GetTable<Moodofconsum>();
			}
		}
		
		public System.Data.Linq.Table<Province> Province
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Saraly> Saraly
		{
			get
			{
				return this.GetTable<Saraly>();
			}
		}
		
		public System.Data.Linq.Table<SmallArea> SmallArea
		{
			get
			{
				return this.GetTable<SmallArea>();
			}
		}
		
		public System.Data.Linq.Table<summary> summary
		{
			get
			{
				return this.GetTable<summary>();
			}
		}
		
		public System.Data.Linq.Table<Usergroup> Usergroup
		{
			get
			{
				return this.GetTable<Usergroup>();
			}
		}
		
		public System.Data.Linq.Table<YearMonth> YearMonth
		{
			get
			{
				return this.GetTable<YearMonth>();
			}
		}
		
		public System.Data.Linq.Table<user> user
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<UserCompany> UserCompany
		{
			get
			{
				return this.GetTable<UserCompany>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private int _ProvinceID;
		
		private string _AreaCode;
		
		private string _IP;
		
		private string _MapFile;
		
		private string _Pingyin;
		
		private System.Nullable<int> _SmallAreaID;
		
		private string _CityCode;
		
		private EntitySet<CityZone> _CityZone;
		
		private EntitySet<Company> _Company;
		
		private EntitySet<user> _user;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<SmallArea> _SmallArea;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnSmallAreaIDChanging(System.Nullable<int> value);
    partial void OnSmallAreaIDChanged();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    #endregion
		
		public City()
		{
			this._CityZone = new EntitySet<CityZone>(new Action<CityZone>(this.attach_CityZone), new Action<CityZone>(this.detach_CityZone));
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			this._user = new EntitySet<user>(new Action<user>(this.attach_user), new Action<user>(this.detach_user));
			this._Province = default(EntityRef<Province>);
			this._SmallArea = default(EntityRef<SmallArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="VarChar(50)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(20)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", DbType="Int")]
		public System.Nullable<int> SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					if (this._SmallArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityCode", DbType="VarChar(50)")]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_CityZone", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<CityZone> CityZone
		{
			get
			{
				return this._CityZone;
			}
			set
			{
				this._CityZone.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_Company", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_user", Storage="_user", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<user> user
		{
			get
			{
				return this._user;
			}
			set
			{
				this._user.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.City.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_City", Storage="_SmallArea", ThisKey="SmallAreaID", OtherKey="SmallAreaID", IsForeignKey=true)]
		public SmallArea SmallArea
		{
			get
			{
				return this._SmallArea.Entity;
			}
			set
			{
				SmallArea previousValue = this._SmallArea.Entity;
				if (((previousValue != value) 
							|| (this._SmallArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SmallArea.Entity = null;
						previousValue.City.Remove(this);
					}
					this._SmallArea.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._SmallAreaID = value.SmallAreaID;
					}
					else
					{
						this._SmallAreaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SmallArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CityZone(CityZone entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_CityZone(CityZone entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityZone")]
	public partial class CityZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityZoneID;
		
		private int _CityID;
		
		private string _CityZoneName;
		
		private string _IP;
		
		private string _MapFile;
		
		private string _Pingyin;
		
		private string _CityZoneCode;
		
		private EntitySet<Company> _Company;
		
		private EntitySet<SmallArea> _SmallArea;
		
		private EntitySet<user> _user;
		
		private EntityRef<City> _City;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityZoneIDChanging(int value);
    partial void OnCityZoneIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityZoneNameChanging(string value);
    partial void OnCityZoneNameChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnCityZoneCodeChanging(string value);
    partial void OnCityZoneCodeChanged();
    #endregion
		
		public CityZone()
		{
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			this._SmallArea = new EntitySet<SmallArea>(new Action<SmallArea>(this.attach_SmallArea), new Action<SmallArea>(this.detach_SmallArea));
			this._user = new EntitySet<user>(new Action<user>(this.attach_user), new Action<user>(this.detach_user));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string CityZoneName
		{
			get
			{
				return this._CityZoneName;
			}
			set
			{
				if ((this._CityZoneName != value))
				{
					this.OnCityZoneNameChanging(value);
					this.SendPropertyChanging();
					this._CityZoneName = value;
					this.SendPropertyChanged("CityZoneName");
					this.OnCityZoneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(10)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneCode", DbType="VarChar(50)")]
		public string CityZoneCode
		{
			get
			{
				return this._CityZoneCode;
			}
			set
			{
				if ((this._CityZoneCode != value))
				{
					this.OnCityZoneCodeChanging(value);
					this.SendPropertyChanging();
					this._CityZoneCode = value;
					this.SendPropertyChanged("CityZoneCode");
					this.OnCityZoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_Company", Storage="_Company", ThisKey="CityZoneID", OtherKey="CityZoneID")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_SmallArea", Storage="_SmallArea", ThisKey="CityZoneID", OtherKey="CityZoneID")]
		public EntitySet<SmallArea> SmallArea
		{
			get
			{
				return this._SmallArea;
			}
			set
			{
				this._SmallArea.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_user", Storage="_user", ThisKey="CityZoneID", OtherKey="CityZoneID")]
		public EntitySet<user> user
		{
			get
			{
				return this._user;
			}
			set
			{
				this._user.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.CityZone.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.CityZone.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = null;
		}
		
		private void attach_SmallArea(SmallArea entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = this;
		}
		
		private void detach_SmallArea(SmallArea entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = null;
		}
		
		private void attach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = this;
		}
		
		private void detach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _CompanyName;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _ProvinceID;
		
		private System.Nullable<int> _CityZoneID;
		
		private System.Nullable<int> _SmallAreaID;
		
		private string _Address;
		
		private string _Describe;
		
		private string _Tellphone;
		
		private string _Website;
		
		private System.Nullable<short> _CompanyTypeID;
		
		private EntitySet<UserCompany> _UserCompany;
		
		private EntityRef<City> _City;
		
		private EntityRef<CityZone> _CityZone;
		
		private EntityRef<CompanyType> _CompanyType;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<SmallArea> _SmallArea;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnCityZoneIDChanging(System.Nullable<int> value);
    partial void OnCityZoneIDChanged();
    partial void OnSmallAreaIDChanging(System.Nullable<int> value);
    partial void OnSmallAreaIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescribeChanging(string value);
    partial void OnDescribeChanged();
    partial void OnTellphoneChanging(string value);
    partial void OnTellphoneChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnCompanyTypeIDChanging(System.Nullable<short> value);
    partial void OnCompanyTypeIDChanged();
    #endregion
		
		public Company()
		{
			this._UserCompany = new EntitySet<UserCompany>(new Action<UserCompany>(this.attach_UserCompany), new Action<UserCompany>(this.detach_UserCompany));
			this._City = default(EntityRef<City>);
			this._CityZone = default(EntityRef<CityZone>);
			this._CompanyType = default(EntityRef<CompanyType>);
			this._Province = default(EntityRef<Province>);
			this._SmallArea = default(EntityRef<SmallArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(200)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", DbType="Int")]
		public System.Nullable<int> CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					if (this._CityZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", DbType="Int")]
		public System.Nullable<int> SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					if (this._SmallArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="VarChar(200)")]
		public string Describe
		{
			get
			{
				return this._Describe;
			}
			set
			{
				if ((this._Describe != value))
				{
					this.OnDescribeChanging(value);
					this.SendPropertyChanging();
					this._Describe = value;
					this.SendPropertyChanged("Describe");
					this.OnDescribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tellphone", DbType="VarChar(20)")]
		public string Tellphone
		{
			get
			{
				return this._Tellphone;
			}
			set
			{
				if ((this._Tellphone != value))
				{
					this.OnTellphoneChanging(value);
					this.SendPropertyChanging();
					this._Tellphone = value;
					this.SendPropertyChanged("Tellphone");
					this.OnTellphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(200)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyTypeID", DbType="SmallInt")]
		public System.Nullable<short> CompanyTypeID
		{
			get
			{
				return this._CompanyTypeID;
			}
			set
			{
				if ((this._CompanyTypeID != value))
				{
					if (this._CompanyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyTypeID = value;
					this.SendPropertyChanged("CompanyTypeID");
					this.OnCompanyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserCompany", Storage="_UserCompany", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<UserCompany> UserCompany
		{
			get
			{
				return this._UserCompany;
			}
			set
			{
				this._UserCompany.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_Company", Storage="_CityZone", ThisKey="CityZoneID", OtherKey="CityZoneID", IsForeignKey=true)]
		public CityZone CityZone
		{
			get
			{
				return this._CityZone.Entity;
			}
			set
			{
				CityZone previousValue = this._CityZone.Entity;
				if (((previousValue != value) 
							|| (this._CityZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CityZone.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._CityZone.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._CityZoneID = value.CityZoneID;
					}
					else
					{
						this._CityZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CityZone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyType_Company", Storage="_CompanyType", ThisKey="CompanyTypeID", OtherKey="CompanyTypeID", IsForeignKey=true)]
		public CompanyType CompanyType
		{
			get
			{
				return this._CompanyType.Entity;
			}
			set
			{
				CompanyType previousValue = this._CompanyType.Entity;
				if (((previousValue != value) 
							|| (this._CompanyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyType.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._CompanyType.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._CompanyTypeID = value.CompanyTypeID;
					}
					else
					{
						this._CompanyTypeID = default(Nullable<short>);
					}
					this.SendPropertyChanged("CompanyType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Company", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_Company", Storage="_SmallArea", ThisKey="SmallAreaID", OtherKey="SmallAreaID", IsForeignKey=true)]
		public SmallArea SmallArea
		{
			get
			{
				return this._SmallArea.Entity;
			}
			set
			{
				SmallArea previousValue = this._SmallArea.Entity;
				if (((previousValue != value) 
							|| (this._SmallArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SmallArea.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._SmallArea.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._SmallAreaID = value.SmallAreaID;
					}
					else
					{
						this._SmallAreaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SmallArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCompany(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_UserCompany(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyType")]
	public partial class CompanyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CompanyTypeID;
		
		private string _comTypename;
		
		private string _Remark;
		
		private short _parentID;
		
		private EntitySet<Company> _Company;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyTypeIDChanging(short value);
    partial void OnCompanyTypeIDChanged();
    partial void OncomTypenameChanging(string value);
    partial void OncomTypenameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnparentIDChanging(short value);
    partial void OnparentIDChanged();
    #endregion
		
		public CompanyType()
		{
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyTypeID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CompanyTypeID
		{
			get
			{
				return this._CompanyTypeID;
			}
			set
			{
				if ((this._CompanyTypeID != value))
				{
					this.OnCompanyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyTypeID = value;
					this.SendPropertyChanged("CompanyTypeID");
					this.OnCompanyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comTypename", DbType="VarChar(100)")]
		public string comTypename
		{
			get
			{
				return this._comTypename;
			}
			set
			{
				if ((this._comTypename != value))
				{
					this.OncomTypenameChanging(value);
					this.SendPropertyChanging();
					this._comTypename = value;
					this.SendPropertyChanged("comTypename");
					this.OncomTypenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="SmallInt NOT NULL")]
		public short parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyType_Company", Storage="_Company", ThisKey="CompanyTypeID", OtherKey="CompanyTypeID")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyType = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.consumption")]
	public partial class consumption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _consumptionID;
		
		private int _YearMonthID;
		
		private int _UsergroupID;
		
		private System.Nullable<byte> _consumTypeID;
		
		private System.Nullable<decimal> _consumAmount;
		
		private string _consumYear;
		
		private string _consumMonth;
		
		private System.Nullable<System.DateTime> _consumDate;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private string _remark;
		
		private string _userCompanyIDs;
		
		private EntitySet<Moodofconsum> _Moodofconsum;
		
		private EntityRef<consumType> _consumType;
		
		private EntityRef<Usergroup> _Usergroup;
		
		private EntityRef<YearMonth> _YearMonth;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnconsumptionIDChanging(int value);
    partial void OnconsumptionIDChanged();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OnconsumTypeIDChanging(System.Nullable<byte> value);
    partial void OnconsumTypeIDChanged();
    partial void OnconsumAmountChanging(System.Nullable<decimal> value);
    partial void OnconsumAmountChanged();
    partial void OnconsumYearChanging(string value);
    partial void OnconsumYearChanged();
    partial void OnconsumMonthChanging(string value);
    partial void OnconsumMonthChanged();
    partial void OnconsumDateChanging(System.Nullable<System.DateTime> value);
    partial void OnconsumDateChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnuserCompanyIDsChanging(string value);
    partial void OnuserCompanyIDsChanged();
    #endregion
		
		public consumption()
		{
			this._Moodofconsum = new EntitySet<Moodofconsum>(new Action<Moodofconsum>(this.attach_Moodofconsum), new Action<Moodofconsum>(this.detach_Moodofconsum));
			this._consumType = default(EntityRef<consumType>);
			this._Usergroup = default(EntityRef<Usergroup>);
			this._YearMonth = default(EntityRef<YearMonth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int consumptionID
		{
			get
			{
				return this._consumptionID;
			}
			set
			{
				if ((this._consumptionID != value))
				{
					this.OnconsumptionIDChanging(value);
					this.SendPropertyChanging();
					this._consumptionID = value;
					this.SendPropertyChanged("consumptionID");
					this.OnconsumptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", DbType="Int NOT NULL")]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					if (this._YearMonth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", DbType="Int NOT NULL")]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					if (this._Usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumTypeID", DbType="TinyInt")]
		public System.Nullable<byte> consumTypeID
		{
			get
			{
				return this._consumTypeID;
			}
			set
			{
				if ((this._consumTypeID != value))
				{
					if (this._consumType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnconsumTypeIDChanging(value);
					this.SendPropertyChanging();
					this._consumTypeID = value;
					this.SendPropertyChanged("consumTypeID");
					this.OnconsumTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumAmount", DbType="Money")]
		public System.Nullable<decimal> consumAmount
		{
			get
			{
				return this._consumAmount;
			}
			set
			{
				if ((this._consumAmount != value))
				{
					this.OnconsumAmountChanging(value);
					this.SendPropertyChanging();
					this._consumAmount = value;
					this.SendPropertyChanged("consumAmount");
					this.OnconsumAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumYear", DbType="VarChar(10)")]
		public string consumYear
		{
			get
			{
				return this._consumYear;
			}
			set
			{
				if ((this._consumYear != value))
				{
					this.OnconsumYearChanging(value);
					this.SendPropertyChanging();
					this._consumYear = value;
					this.SendPropertyChanged("consumYear");
					this.OnconsumYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumMonth", DbType="VarChar(10)")]
		public string consumMonth
		{
			get
			{
				return this._consumMonth;
			}
			set
			{
				if ((this._consumMonth != value))
				{
					this.OnconsumMonthChanging(value);
					this.SendPropertyChanging();
					this._consumMonth = value;
					this.SendPropertyChanged("consumMonth");
					this.OnconsumMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> consumDate
		{
			get
			{
				return this._consumDate;
			}
			set
			{
				if ((this._consumDate != value))
				{
					this.OnconsumDateChanging(value);
					this.SendPropertyChanging();
					this._consumDate = value;
					this.SendPropertyChanged("consumDate");
					this.OnconsumDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(2000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyIDs", DbType="VarChar(1000)")]
		public string userCompanyIDs
		{
			get
			{
				return this._userCompanyIDs;
			}
			set
			{
				if ((this._userCompanyIDs != value))
				{
					this.OnuserCompanyIDsChanging(value);
					this.SendPropertyChanging();
					this._userCompanyIDs = value;
					this.SendPropertyChanged("userCompanyIDs");
					this.OnuserCompanyIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="consumption_Moodofconsum", Storage="_Moodofconsum", ThisKey="consumptionID", OtherKey="consumptionID")]
		public EntitySet<Moodofconsum> Moodofconsum
		{
			get
			{
				return this._Moodofconsum;
			}
			set
			{
				this._Moodofconsum.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="consumType_consumption", Storage="_consumType", ThisKey="consumTypeID", OtherKey="consumTypeID", IsForeignKey=true)]
		public consumType consumType
		{
			get
			{
				return this._consumType.Entity;
			}
			set
			{
				consumType previousValue = this._consumType.Entity;
				if (((previousValue != value) 
							|| (this._consumType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._consumType.Entity = null;
						previousValue.consumption.Remove(this);
					}
					this._consumType.Entity = value;
					if ((value != null))
					{
						value.consumption.Add(this);
						this._consumTypeID = value.consumTypeID;
					}
					else
					{
						this._consumTypeID = default(Nullable<byte>);
					}
					this.SendPropertyChanged("consumType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_consumption", Storage="_Usergroup", ThisKey="UsergroupID", OtherKey="UsergroupID", IsForeignKey=true)]
		public Usergroup Usergroup
		{
			get
			{
				return this._Usergroup.Entity;
			}
			set
			{
				Usergroup previousValue = this._Usergroup.Entity;
				if (((previousValue != value) 
							|| (this._Usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usergroup.Entity = null;
						previousValue.consumption.Remove(this);
					}
					this._Usergroup.Entity = value;
					if ((value != null))
					{
						value.consumption.Add(this);
						this._UsergroupID = value.UsergroupID;
					}
					else
					{
						this._UsergroupID = default(int);
					}
					this.SendPropertyChanged("Usergroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_consumption", Storage="_YearMonth", ThisKey="YearMonthID", OtherKey="YearMonthID", IsForeignKey=true)]
		public YearMonth YearMonth
		{
			get
			{
				return this._YearMonth.Entity;
			}
			set
			{
				YearMonth previousValue = this._YearMonth.Entity;
				if (((previousValue != value) 
							|| (this._YearMonth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearMonth.Entity = null;
						previousValue.consumption.Remove(this);
					}
					this._YearMonth.Entity = value;
					if ((value != null))
					{
						value.consumption.Add(this);
						this._YearMonthID = value.YearMonthID;
					}
					else
					{
						this._YearMonthID = default(int);
					}
					this.SendPropertyChanged("YearMonth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Moodofconsum(Moodofconsum entity)
		{
			this.SendPropertyChanging();
			entity.consumption = this;
		}
		
		private void detach_Moodofconsum(Moodofconsum entity)
		{
			this.SendPropertyChanging();
			entity.consumption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.consumType")]
	public partial class consumType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _consumTypeID;
		
		private string _consumTypename;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private string _remark;
		
		private short _parentID;
		
		private EntitySet<consumption> _consumption;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnconsumTypeIDChanging(byte value);
    partial void OnconsumTypeIDChanged();
    partial void OnconsumTypenameChanging(string value);
    partial void OnconsumTypenameChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnparentIDChanging(short value);
    partial void OnparentIDChanged();
    #endregion
		
		public consumType()
		{
			this._consumption = new EntitySet<consumption>(new Action<consumption>(this.attach_consumption), new Action<consumption>(this.detach_consumption));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumTypeID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte consumTypeID
		{
			get
			{
				return this._consumTypeID;
			}
			set
			{
				if ((this._consumTypeID != value))
				{
					this.OnconsumTypeIDChanging(value);
					this.SendPropertyChanging();
					this._consumTypeID = value;
					this.SendPropertyChanged("consumTypeID");
					this.OnconsumTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumTypename", DbType="VarChar(100)")]
		public string consumTypename
		{
			get
			{
				return this._consumTypename;
			}
			set
			{
				if ((this._consumTypename != value))
				{
					this.OnconsumTypenameChanging(value);
					this.SendPropertyChanging();
					this._consumTypename = value;
					this.SendPropertyChanged("consumTypename");
					this.OnconsumTypenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(2000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="SmallInt NOT NULL")]
		public short parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="consumType_consumption", Storage="_consumption", ThisKey="consumTypeID", OtherKey="consumTypeID")]
		public EntitySet<consumption> consumption
		{
			get
			{
				return this._consumption;
			}
			set
			{
				this._consumption.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.consumType = this;
		}
		
		private void detach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.consumType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.finan")]
	public partial class finan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _finanID;
		
		private int _YearMonthID;
		
		private int _UsergroupID;
		
		private System.Nullable<decimal> _rLovefund;
		
		private System.Nullable<decimal> _rtotalsaveMoney;
		
		private System.Nullable<decimal> _rsaveMoney1;
		
		private System.Nullable<decimal> _rsaveMoney2;
		
		private System.Nullable<decimal> _rsaveMoney3;
		
		private System.Nullable<decimal> _rsaveMoney4;
		
		private System.Nullable<decimal> _diffTotalMoney;
		
		private System.Nullable<decimal> _diffLovefund;
		
		private System.Nullable<decimal> _diffsaveMoney1;
		
		private System.Nullable<decimal> _diffsaveMoney2;
		
		private System.Nullable<decimal> _diffsaveMoney3;
		
		private System.Nullable<decimal> _diffsaveMoney4;
		
		private System.Nullable<decimal> _incomeMoney;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private System.Nullable<decimal> _consummoney;
		
		private string _finanYear;
		
		private string _finanMonth;
		
		private System.Nullable<System.DateTime> _finanDate;
		
		private string _userCompanyIDs;
		
		private EntityRef<Usergroup> _Usergroup;
		
		private EntityRef<YearMonth> _YearMonth;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfinanIDChanging(int value);
    partial void OnfinanIDChanged();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OnrLovefundChanging(System.Nullable<decimal> value);
    partial void OnrLovefundChanged();
    partial void OnrtotalsaveMoneyChanging(System.Nullable<decimal> value);
    partial void OnrtotalsaveMoneyChanged();
    partial void OnrsaveMoney1Changing(System.Nullable<decimal> value);
    partial void OnrsaveMoney1Changed();
    partial void OnrsaveMoney2Changing(System.Nullable<decimal> value);
    partial void OnrsaveMoney2Changed();
    partial void OnrsaveMoney3Changing(System.Nullable<decimal> value);
    partial void OnrsaveMoney3Changed();
    partial void OnrsaveMoney4Changing(System.Nullable<decimal> value);
    partial void OnrsaveMoney4Changed();
    partial void OndiffTotalMoneyChanging(System.Nullable<decimal> value);
    partial void OndiffTotalMoneyChanged();
    partial void OndiffLovefundChanging(System.Nullable<decimal> value);
    partial void OndiffLovefundChanged();
    partial void OndiffsaveMoney1Changing(System.Nullable<decimal> value);
    partial void OndiffsaveMoney1Changed();
    partial void OndiffsaveMoney2Changing(System.Nullable<decimal> value);
    partial void OndiffsaveMoney2Changed();
    partial void OndiffsaveMoney3Changing(System.Nullable<decimal> value);
    partial void OndiffsaveMoney3Changed();
    partial void OndiffsaveMoney4Changing(System.Nullable<decimal> value);
    partial void OndiffsaveMoney4Changed();
    partial void OnincomeMoneyChanging(System.Nullable<decimal> value);
    partial void OnincomeMoneyChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnconsummoneyChanging(System.Nullable<decimal> value);
    partial void OnconsummoneyChanged();
    partial void OnfinanYearChanging(string value);
    partial void OnfinanYearChanged();
    partial void OnfinanMonthChanging(string value);
    partial void OnfinanMonthChanged();
    partial void OnfinanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfinanDateChanged();
    partial void OnuserCompanyIDsChanging(string value);
    partial void OnuserCompanyIDsChanged();
    #endregion
		
		public finan()
		{
			this._Usergroup = default(EntityRef<Usergroup>);
			this._YearMonth = default(EntityRef<YearMonth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int finanID
		{
			get
			{
				return this._finanID;
			}
			set
			{
				if ((this._finanID != value))
				{
					this.OnfinanIDChanging(value);
					this.SendPropertyChanging();
					this._finanID = value;
					this.SendPropertyChanged("finanID");
					this.OnfinanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", DbType="Int NOT NULL")]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					if (this._YearMonth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", DbType="Int NOT NULL")]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					if (this._Usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rLovefund", DbType="Money")]
		public System.Nullable<decimal> rLovefund
		{
			get
			{
				return this._rLovefund;
			}
			set
			{
				if ((this._rLovefund != value))
				{
					this.OnrLovefundChanging(value);
					this.SendPropertyChanging();
					this._rLovefund = value;
					this.SendPropertyChanged("rLovefund");
					this.OnrLovefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rtotalsaveMoney", DbType="Money")]
		public System.Nullable<decimal> rtotalsaveMoney
		{
			get
			{
				return this._rtotalsaveMoney;
			}
			set
			{
				if ((this._rtotalsaveMoney != value))
				{
					this.OnrtotalsaveMoneyChanging(value);
					this.SendPropertyChanging();
					this._rtotalsaveMoney = value;
					this.SendPropertyChanged("rtotalsaveMoney");
					this.OnrtotalsaveMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsaveMoney1", DbType="Money")]
		public System.Nullable<decimal> rsaveMoney1
		{
			get
			{
				return this._rsaveMoney1;
			}
			set
			{
				if ((this._rsaveMoney1 != value))
				{
					this.OnrsaveMoney1Changing(value);
					this.SendPropertyChanging();
					this._rsaveMoney1 = value;
					this.SendPropertyChanged("rsaveMoney1");
					this.OnrsaveMoney1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsaveMoney2", DbType="Money")]
		public System.Nullable<decimal> rsaveMoney2
		{
			get
			{
				return this._rsaveMoney2;
			}
			set
			{
				if ((this._rsaveMoney2 != value))
				{
					this.OnrsaveMoney2Changing(value);
					this.SendPropertyChanging();
					this._rsaveMoney2 = value;
					this.SendPropertyChanged("rsaveMoney2");
					this.OnrsaveMoney2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsaveMoney3", DbType="Money")]
		public System.Nullable<decimal> rsaveMoney3
		{
			get
			{
				return this._rsaveMoney3;
			}
			set
			{
				if ((this._rsaveMoney3 != value))
				{
					this.OnrsaveMoney3Changing(value);
					this.SendPropertyChanging();
					this._rsaveMoney3 = value;
					this.SendPropertyChanged("rsaveMoney3");
					this.OnrsaveMoney3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsaveMoney4", DbType="Money")]
		public System.Nullable<decimal> rsaveMoney4
		{
			get
			{
				return this._rsaveMoney4;
			}
			set
			{
				if ((this._rsaveMoney4 != value))
				{
					this.OnrsaveMoney4Changing(value);
					this.SendPropertyChanging();
					this._rsaveMoney4 = value;
					this.SendPropertyChanged("rsaveMoney4");
					this.OnrsaveMoney4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffTotalMoney", DbType="Money")]
		public System.Nullable<decimal> diffTotalMoney
		{
			get
			{
				return this._diffTotalMoney;
			}
			set
			{
				if ((this._diffTotalMoney != value))
				{
					this.OndiffTotalMoneyChanging(value);
					this.SendPropertyChanging();
					this._diffTotalMoney = value;
					this.SendPropertyChanged("diffTotalMoney");
					this.OndiffTotalMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffLovefund", DbType="Money")]
		public System.Nullable<decimal> diffLovefund
		{
			get
			{
				return this._diffLovefund;
			}
			set
			{
				if ((this._diffLovefund != value))
				{
					this.OndiffLovefundChanging(value);
					this.SendPropertyChanging();
					this._diffLovefund = value;
					this.SendPropertyChanged("diffLovefund");
					this.OndiffLovefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffsaveMoney1", DbType="Money")]
		public System.Nullable<decimal> diffsaveMoney1
		{
			get
			{
				return this._diffsaveMoney1;
			}
			set
			{
				if ((this._diffsaveMoney1 != value))
				{
					this.OndiffsaveMoney1Changing(value);
					this.SendPropertyChanging();
					this._diffsaveMoney1 = value;
					this.SendPropertyChanged("diffsaveMoney1");
					this.OndiffsaveMoney1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffsaveMoney2", DbType="Money")]
		public System.Nullable<decimal> diffsaveMoney2
		{
			get
			{
				return this._diffsaveMoney2;
			}
			set
			{
				if ((this._diffsaveMoney2 != value))
				{
					this.OndiffsaveMoney2Changing(value);
					this.SendPropertyChanging();
					this._diffsaveMoney2 = value;
					this.SendPropertyChanged("diffsaveMoney2");
					this.OndiffsaveMoney2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffsaveMoney3", DbType="Money")]
		public System.Nullable<decimal> diffsaveMoney3
		{
			get
			{
				return this._diffsaveMoney3;
			}
			set
			{
				if ((this._diffsaveMoney3 != value))
				{
					this.OndiffsaveMoney3Changing(value);
					this.SendPropertyChanging();
					this._diffsaveMoney3 = value;
					this.SendPropertyChanged("diffsaveMoney3");
					this.OndiffsaveMoney3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diffsaveMoney4", DbType="Money")]
		public System.Nullable<decimal> diffsaveMoney4
		{
			get
			{
				return this._diffsaveMoney4;
			}
			set
			{
				if ((this._diffsaveMoney4 != value))
				{
					this.OndiffsaveMoney4Changing(value);
					this.SendPropertyChanging();
					this._diffsaveMoney4 = value;
					this.SendPropertyChanged("diffsaveMoney4");
					this.OndiffsaveMoney4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_incomeMoney", DbType="Money")]
		public System.Nullable<decimal> incomeMoney
		{
			get
			{
				return this._incomeMoney;
			}
			set
			{
				if ((this._incomeMoney != value))
				{
					this.OnincomeMoneyChanging(value);
					this.SendPropertyChanging();
					this._incomeMoney = value;
					this.SendPropertyChanged("incomeMoney");
					this.OnincomeMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(2000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consummoney", DbType="Money")]
		public System.Nullable<decimal> consummoney
		{
			get
			{
				return this._consummoney;
			}
			set
			{
				if ((this._consummoney != value))
				{
					this.OnconsummoneyChanging(value);
					this.SendPropertyChanging();
					this._consummoney = value;
					this.SendPropertyChanged("consummoney");
					this.OnconsummoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanYear", DbType="VarChar(10)")]
		public string finanYear
		{
			get
			{
				return this._finanYear;
			}
			set
			{
				if ((this._finanYear != value))
				{
					this.OnfinanYearChanging(value);
					this.SendPropertyChanging();
					this._finanYear = value;
					this.SendPropertyChanged("finanYear");
					this.OnfinanYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanMonth", DbType="VarChar(10)")]
		public string finanMonth
		{
			get
			{
				return this._finanMonth;
			}
			set
			{
				if ((this._finanMonth != value))
				{
					this.OnfinanMonthChanging(value);
					this.SendPropertyChanging();
					this._finanMonth = value;
					this.SendPropertyChanged("finanMonth");
					this.OnfinanMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> finanDate
		{
			get
			{
				return this._finanDate;
			}
			set
			{
				if ((this._finanDate != value))
				{
					this.OnfinanDateChanging(value);
					this.SendPropertyChanging();
					this._finanDate = value;
					this.SendPropertyChanged("finanDate");
					this.OnfinanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyIDs", DbType="VarChar(1000)")]
		public string userCompanyIDs
		{
			get
			{
				return this._userCompanyIDs;
			}
			set
			{
				if ((this._userCompanyIDs != value))
				{
					this.OnuserCompanyIDsChanging(value);
					this.SendPropertyChanging();
					this._userCompanyIDs = value;
					this.SendPropertyChanged("userCompanyIDs");
					this.OnuserCompanyIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_finan", Storage="_Usergroup", ThisKey="UsergroupID", OtherKey="UsergroupID", IsForeignKey=true)]
		public Usergroup Usergroup
		{
			get
			{
				return this._Usergroup.Entity;
			}
			set
			{
				Usergroup previousValue = this._Usergroup.Entity;
				if (((previousValue != value) 
							|| (this._Usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usergroup.Entity = null;
						previousValue.finan.Remove(this);
					}
					this._Usergroup.Entity = value;
					if ((value != null))
					{
						value.finan.Add(this);
						this._UsergroupID = value.UsergroupID;
					}
					else
					{
						this._UsergroupID = default(int);
					}
					this.SendPropertyChanged("Usergroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_finan", Storage="_YearMonth", ThisKey="YearMonthID", OtherKey="YearMonthID", IsForeignKey=true)]
		public YearMonth YearMonth
		{
			get
			{
				return this._YearMonth.Entity;
			}
			set
			{
				YearMonth previousValue = this._YearMonth.Entity;
				if (((previousValue != value) 
							|| (this._YearMonth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearMonth.Entity = null;
						previousValue.finan.Remove(this);
					}
					this._YearMonth.Entity = value;
					if ((value != null))
					{
						value.finan.Add(this);
						this._YearMonthID = value.YearMonthID;
					}
					else
					{
						this._YearMonthID = default(int);
					}
					this.SendPropertyChanged("YearMonth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.finanplan")]
	public partial class finanplan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _finanplanID;
		
		private int _YearMonthID;
		
		private int _UsergroupID;
		
		private System.Nullable<decimal> _loveFund;
		
		private System.Nullable<decimal> _totalsaveMoney;
		
		private System.Nullable<decimal> _saveMoney1;
		
		private System.Nullable<decimal> _saveMoney2;
		
		private System.Nullable<decimal> _saveMoney3;
		
		private System.Nullable<decimal> _saveMoney4;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private string _finanplanYear;
		
		private string _finanplanMonth;
		
		private System.Nullable<System.DateTime> _finanplanDate;
		
		private string _remark;
		
		private System.Nullable<decimal> _consumplanmoney;
		
		private System.Nullable<decimal> _incomeMoney;
		
		private string _userCompanyIDs;
		
		private EntityRef<Usergroup> _Usergroup;
		
		private EntityRef<YearMonth> _YearMonth;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfinanplanIDChanging(int value);
    partial void OnfinanplanIDChanged();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OnloveFundChanging(System.Nullable<decimal> value);
    partial void OnloveFundChanged();
    partial void OntotalsaveMoneyChanging(System.Nullable<decimal> value);
    partial void OntotalsaveMoneyChanged();
    partial void OnsaveMoney1Changing(System.Nullable<decimal> value);
    partial void OnsaveMoney1Changed();
    partial void OnsaveMoney2Changing(System.Nullable<decimal> value);
    partial void OnsaveMoney2Changed();
    partial void OnsaveMoney3Changing(System.Nullable<decimal> value);
    partial void OnsaveMoney3Changed();
    partial void OnsaveMoney4Changing(System.Nullable<decimal> value);
    partial void OnsaveMoney4Changed();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnfinanplanYearChanging(string value);
    partial void OnfinanplanYearChanged();
    partial void OnfinanplanMonthChanging(string value);
    partial void OnfinanplanMonthChanged();
    partial void OnfinanplanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfinanplanDateChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnconsumplanmoneyChanging(System.Nullable<decimal> value);
    partial void OnconsumplanmoneyChanged();
    partial void OnincomeMoneyChanging(System.Nullable<decimal> value);
    partial void OnincomeMoneyChanged();
    partial void OnuserCompanyIDsChanging(string value);
    partial void OnuserCompanyIDsChanged();
    #endregion
		
		public finanplan()
		{
			this._Usergroup = default(EntityRef<Usergroup>);
			this._YearMonth = default(EntityRef<YearMonth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanplanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int finanplanID
		{
			get
			{
				return this._finanplanID;
			}
			set
			{
				if ((this._finanplanID != value))
				{
					this.OnfinanplanIDChanging(value);
					this.SendPropertyChanging();
					this._finanplanID = value;
					this.SendPropertyChanged("finanplanID");
					this.OnfinanplanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", DbType="Int NOT NULL")]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					if (this._YearMonth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", DbType="Int NOT NULL")]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					if (this._Usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loveFund", DbType="Money")]
		public System.Nullable<decimal> loveFund
		{
			get
			{
				return this._loveFund;
			}
			set
			{
				if ((this._loveFund != value))
				{
					this.OnloveFundChanging(value);
					this.SendPropertyChanging();
					this._loveFund = value;
					this.SendPropertyChanged("loveFund");
					this.OnloveFundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalsaveMoney", DbType="Money")]
		public System.Nullable<decimal> totalsaveMoney
		{
			get
			{
				return this._totalsaveMoney;
			}
			set
			{
				if ((this._totalsaveMoney != value))
				{
					this.OntotalsaveMoneyChanging(value);
					this.SendPropertyChanging();
					this._totalsaveMoney = value;
					this.SendPropertyChanged("totalsaveMoney");
					this.OntotalsaveMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saveMoney1", DbType="Money")]
		public System.Nullable<decimal> saveMoney1
		{
			get
			{
				return this._saveMoney1;
			}
			set
			{
				if ((this._saveMoney1 != value))
				{
					this.OnsaveMoney1Changing(value);
					this.SendPropertyChanging();
					this._saveMoney1 = value;
					this.SendPropertyChanged("saveMoney1");
					this.OnsaveMoney1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saveMoney2", DbType="Money")]
		public System.Nullable<decimal> saveMoney2
		{
			get
			{
				return this._saveMoney2;
			}
			set
			{
				if ((this._saveMoney2 != value))
				{
					this.OnsaveMoney2Changing(value);
					this.SendPropertyChanging();
					this._saveMoney2 = value;
					this.SendPropertyChanged("saveMoney2");
					this.OnsaveMoney2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saveMoney3", DbType="Money")]
		public System.Nullable<decimal> saveMoney3
		{
			get
			{
				return this._saveMoney3;
			}
			set
			{
				if ((this._saveMoney3 != value))
				{
					this.OnsaveMoney3Changing(value);
					this.SendPropertyChanging();
					this._saveMoney3 = value;
					this.SendPropertyChanged("saveMoney3");
					this.OnsaveMoney3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saveMoney4", DbType="Money")]
		public System.Nullable<decimal> saveMoney4
		{
			get
			{
				return this._saveMoney4;
			}
			set
			{
				if ((this._saveMoney4 != value))
				{
					this.OnsaveMoney4Changing(value);
					this.SendPropertyChanging();
					this._saveMoney4 = value;
					this.SendPropertyChanged("saveMoney4");
					this.OnsaveMoney4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanplanYear", DbType="VarChar(10)")]
		public string finanplanYear
		{
			get
			{
				return this._finanplanYear;
			}
			set
			{
				if ((this._finanplanYear != value))
				{
					this.OnfinanplanYearChanging(value);
					this.SendPropertyChanging();
					this._finanplanYear = value;
					this.SendPropertyChanged("finanplanYear");
					this.OnfinanplanYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanplanMonth", DbType="VarChar(10)")]
		public string finanplanMonth
		{
			get
			{
				return this._finanplanMonth;
			}
			set
			{
				if ((this._finanplanMonth != value))
				{
					this.OnfinanplanMonthChanging(value);
					this.SendPropertyChanging();
					this._finanplanMonth = value;
					this.SendPropertyChanged("finanplanMonth");
					this.OnfinanplanMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finanplanDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> finanplanDate
		{
			get
			{
				return this._finanplanDate;
			}
			set
			{
				if ((this._finanplanDate != value))
				{
					this.OnfinanplanDateChanging(value);
					this.SendPropertyChanging();
					this._finanplanDate = value;
					this.SendPropertyChanged("finanplanDate");
					this.OnfinanplanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(2000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumplanmoney", DbType="Money")]
		public System.Nullable<decimal> consumplanmoney
		{
			get
			{
				return this._consumplanmoney;
			}
			set
			{
				if ((this._consumplanmoney != value))
				{
					this.OnconsumplanmoneyChanging(value);
					this.SendPropertyChanging();
					this._consumplanmoney = value;
					this.SendPropertyChanged("consumplanmoney");
					this.OnconsumplanmoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_incomeMoney", DbType="Money")]
		public System.Nullable<decimal> incomeMoney
		{
			get
			{
				return this._incomeMoney;
			}
			set
			{
				if ((this._incomeMoney != value))
				{
					this.OnincomeMoneyChanging(value);
					this.SendPropertyChanging();
					this._incomeMoney = value;
					this.SendPropertyChanged("incomeMoney");
					this.OnincomeMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyIDs", DbType="VarChar(1000)")]
		public string userCompanyIDs
		{
			get
			{
				return this._userCompanyIDs;
			}
			set
			{
				if ((this._userCompanyIDs != value))
				{
					this.OnuserCompanyIDsChanging(value);
					this.SendPropertyChanging();
					this._userCompanyIDs = value;
					this.SendPropertyChanged("userCompanyIDs");
					this.OnuserCompanyIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_finanplan", Storage="_Usergroup", ThisKey="UsergroupID", OtherKey="UsergroupID", IsForeignKey=true)]
		public Usergroup Usergroup
		{
			get
			{
				return this._Usergroup.Entity;
			}
			set
			{
				Usergroup previousValue = this._Usergroup.Entity;
				if (((previousValue != value) 
							|| (this._Usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usergroup.Entity = null;
						previousValue.finanplan.Remove(this);
					}
					this._Usergroup.Entity = value;
					if ((value != null))
					{
						value.finanplan.Add(this);
						this._UsergroupID = value.UsergroupID;
					}
					else
					{
						this._UsergroupID = default(int);
					}
					this.SendPropertyChanged("Usergroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_finanplan", Storage="_YearMonth", ThisKey="YearMonthID", OtherKey="YearMonthID", IsForeignKey=true)]
		public YearMonth YearMonth
		{
			get
			{
				return this._YearMonth.Entity;
			}
			set
			{
				YearMonth previousValue = this._YearMonth.Entity;
				if (((previousValue != value) 
							|| (this._YearMonth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearMonth.Entity = null;
						previousValue.finanplan.Remove(this);
					}
					this._YearMonth.Entity = value;
					if ((value != null))
					{
						value.finanplan.Add(this);
						this._YearMonthID = value.YearMonthID;
					}
					else
					{
						this._YearMonthID = default(int);
					}
					this.SendPropertyChanged("YearMonth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Moodofconsum")]
	public partial class Moodofconsum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MoodofconsumID;
		
		private int _consumptionID;
		
		private string _Moodcontent;
		
		private string _Moodtitle;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private System.Nullable<System.DateTime> _lastdate;
		
		private EntityRef<consumption> _consumption;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMoodofconsumIDChanging(int value);
    partial void OnMoodofconsumIDChanged();
    partial void OnconsumptionIDChanging(int value);
    partial void OnconsumptionIDChanged();
    partial void OnMoodcontentChanging(string value);
    partial void OnMoodcontentChanged();
    partial void OnMoodtitleChanging(string value);
    partial void OnMoodtitleChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnlastdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastdateChanged();
    #endregion
		
		public Moodofconsum()
		{
			this._consumption = default(EntityRef<consumption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoodofconsumID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MoodofconsumID
		{
			get
			{
				return this._MoodofconsumID;
			}
			set
			{
				if ((this._MoodofconsumID != value))
				{
					this.OnMoodofconsumIDChanging(value);
					this.SendPropertyChanging();
					this._MoodofconsumID = value;
					this.SendPropertyChanged("MoodofconsumID");
					this.OnMoodofconsumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumptionID", DbType="Int NOT NULL")]
		public int consumptionID
		{
			get
			{
				return this._consumptionID;
			}
			set
			{
				if ((this._consumptionID != value))
				{
					if (this._consumption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnconsumptionIDChanging(value);
					this.SendPropertyChanging();
					this._consumptionID = value;
					this.SendPropertyChanged("consumptionID");
					this.OnconsumptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Moodcontent", DbType="VarChar(MAX)")]
		public string Moodcontent
		{
			get
			{
				return this._Moodcontent;
			}
			set
			{
				if ((this._Moodcontent != value))
				{
					this.OnMoodcontentChanging(value);
					this.SendPropertyChanging();
					this._Moodcontent = value;
					this.SendPropertyChanged("Moodcontent");
					this.OnMoodcontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Moodtitle", DbType="VarChar(100)")]
		public string Moodtitle
		{
			get
			{
				return this._Moodtitle;
			}
			set
			{
				if ((this._Moodtitle != value))
				{
					this.OnMoodtitleChanging(value);
					this.SendPropertyChanging();
					this._Moodtitle = value;
					this.SendPropertyChanged("Moodtitle");
					this.OnMoodtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastdate
		{
			get
			{
				return this._lastdate;
			}
			set
			{
				if ((this._lastdate != value))
				{
					this.OnlastdateChanging(value);
					this.SendPropertyChanging();
					this._lastdate = value;
					this.SendPropertyChanged("lastdate");
					this.OnlastdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="consumption_Moodofconsum", Storage="_consumption", ThisKey="consumptionID", OtherKey="consumptionID", IsForeignKey=true)]
		public consumption consumption
		{
			get
			{
				return this._consumption.Entity;
			}
			set
			{
				consumption previousValue = this._consumption.Entity;
				if (((previousValue != value) 
							|| (this._consumption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._consumption.Entity = null;
						previousValue.Moodofconsum.Remove(this);
					}
					this._consumption.Entity = value;
					if ((value != null))
					{
						value.Moodofconsum.Add(this);
						this._consumptionID = value.consumptionID;
					}
					else
					{
						this._consumptionID = default(int);
					}
					this.SendPropertyChanged("consumption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceID;
		
		private string _ProvinceName;
		
		private string _MapFile;
		
		private System.Nullable<int> _CountryID;
		
		private string _Pingyin;
		
		private string _ProvinceCode;
		
		private EntitySet<City> _City;
		
		private EntitySet<Company> _Company;
		
		private EntitySet<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnProvinceCodeChanging(string value);
    partial void OnProvinceCodeChanged();
    #endregion
		
		public Province()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			this._user = new EntitySet<user>(new Action<user>(this.attach_user), new Action<user>(this.detach_user));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceCode", DbType="VarChar(50)")]
		public string ProvinceCode
		{
			get
			{
				return this._ProvinceCode;
			}
			set
			{
				if ((this._ProvinceCode != value))
				{
					this.OnProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._ProvinceCode = value;
					this.SendPropertyChanged("ProvinceCode");
					this.OnProvinceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_City", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Company", Storage="_Company", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_user", Storage="_user", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<user> user
		{
			get
			{
				return this._user;
			}
			set
			{
				this._user.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Saraly")]
	public partial class Saraly : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaralyID;
		
		private int _userCompanyID;
		
		private int _YearMonthID;
		
		private string _Monthsaraly;
		
		private string _Yearsaraly;
		
		private System.Nullable<System.DateTime> _saralyDate;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private System.Nullable<decimal> _TotalMoney;
		
		private System.Nullable<decimal> _baseMoney;
		
		private System.Nullable<decimal> _jixiaoMoney;
		
		private System.Nullable<decimal> _butieMoney;
		
		private System.Nullable<decimal> _kouchuMoney;
		
		private System.Nullable<decimal> _jiabanFei;
		
		private System.Nullable<decimal> _qitaMoney;
		
		private System.Nullable<decimal> _userFund;
		
		private System.Nullable<decimal> _userShebao;
		
		private System.Nullable<decimal> _Pretaxsaraly;
		
		private System.Nullable<decimal> _usertax;
		
		private System.Nullable<decimal> _RealMoney;
		
		private System.Nullable<decimal> _comFund;
		
		private System.Nullable<decimal> _comShebao;
		
		private string _remark;
		
		private EntityRef<YearMonth> _YearMonth;
		
		private EntityRef<UserCompany> _UserCompany;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaralyIDChanging(int value);
    partial void OnSaralyIDChanged();
    partial void OnuserCompanyIDChanging(int value);
    partial void OnuserCompanyIDChanged();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OnMonthsaralyChanging(string value);
    partial void OnMonthsaralyChanged();
    partial void OnYearsaralyChanging(string value);
    partial void OnYearsaralyChanged();
    partial void OnsaralyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnsaralyDateChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnTotalMoneyChanging(System.Nullable<decimal> value);
    partial void OnTotalMoneyChanged();
    partial void OnbaseMoneyChanging(System.Nullable<decimal> value);
    partial void OnbaseMoneyChanged();
    partial void OnjixiaoMoneyChanging(System.Nullable<decimal> value);
    partial void OnjixiaoMoneyChanged();
    partial void OnbutieMoneyChanging(System.Nullable<decimal> value);
    partial void OnbutieMoneyChanged();
    partial void OnkouchuMoneyChanging(System.Nullable<decimal> value);
    partial void OnkouchuMoneyChanged();
    partial void OnjiabanFeiChanging(System.Nullable<decimal> value);
    partial void OnjiabanFeiChanged();
    partial void OnqitaMoneyChanging(System.Nullable<decimal> value);
    partial void OnqitaMoneyChanged();
    partial void OnuserFundChanging(System.Nullable<decimal> value);
    partial void OnuserFundChanged();
    partial void OnuserShebaoChanging(System.Nullable<decimal> value);
    partial void OnuserShebaoChanged();
    partial void OnPretaxsaralyChanging(System.Nullable<decimal> value);
    partial void OnPretaxsaralyChanged();
    partial void OnusertaxChanging(System.Nullable<decimal> value);
    partial void OnusertaxChanged();
    partial void OnRealMoneyChanging(System.Nullable<decimal> value);
    partial void OnRealMoneyChanged();
    partial void OncomFundChanging(System.Nullable<decimal> value);
    partial void OncomFundChanged();
    partial void OncomShebaoChanging(System.Nullable<decimal> value);
    partial void OncomShebaoChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    #endregion
		
		public Saraly()
		{
			this._YearMonth = default(EntityRef<YearMonth>);
			this._UserCompany = default(EntityRef<UserCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaralyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaralyID
		{
			get
			{
				return this._SaralyID;
			}
			set
			{
				if ((this._SaralyID != value))
				{
					this.OnSaralyIDChanging(value);
					this.SendPropertyChanging();
					this._SaralyID = value;
					this.SendPropertyChanged("SaralyID");
					this.OnSaralyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyID", DbType="Int NOT NULL")]
		public int userCompanyID
		{
			get
			{
				return this._userCompanyID;
			}
			set
			{
				if ((this._userCompanyID != value))
				{
					if (this._UserCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._userCompanyID = value;
					this.SendPropertyChanged("userCompanyID");
					this.OnuserCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", DbType="Int NOT NULL")]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					if (this._YearMonth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monthsaraly", DbType="VarChar(10)")]
		public string Monthsaraly
		{
			get
			{
				return this._Monthsaraly;
			}
			set
			{
				if ((this._Monthsaraly != value))
				{
					this.OnMonthsaralyChanging(value);
					this.SendPropertyChanging();
					this._Monthsaraly = value;
					this.SendPropertyChanged("Monthsaraly");
					this.OnMonthsaralyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yearsaraly", DbType="VarChar(10)")]
		public string Yearsaraly
		{
			get
			{
				return this._Yearsaraly;
			}
			set
			{
				if ((this._Yearsaraly != value))
				{
					this.OnYearsaralyChanging(value);
					this.SendPropertyChanging();
					this._Yearsaraly = value;
					this.SendPropertyChanged("Yearsaraly");
					this.OnYearsaralyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saralyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> saralyDate
		{
			get
			{
				return this._saralyDate;
			}
			set
			{
				if ((this._saralyDate != value))
				{
					this.OnsaralyDateChanging(value);
					this.SendPropertyChanging();
					this._saralyDate = value;
					this.SendPropertyChanged("saralyDate");
					this.OnsaralyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMoney", DbType="Money")]
		public System.Nullable<decimal> TotalMoney
		{
			get
			{
				return this._TotalMoney;
			}
			set
			{
				if ((this._TotalMoney != value))
				{
					this.OnTotalMoneyChanging(value);
					this.SendPropertyChanging();
					this._TotalMoney = value;
					this.SendPropertyChanged("TotalMoney");
					this.OnTotalMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseMoney", DbType="Money")]
		public System.Nullable<decimal> baseMoney
		{
			get
			{
				return this._baseMoney;
			}
			set
			{
				if ((this._baseMoney != value))
				{
					this.OnbaseMoneyChanging(value);
					this.SendPropertyChanging();
					this._baseMoney = value;
					this.SendPropertyChanged("baseMoney");
					this.OnbaseMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jixiaoMoney", DbType="Money")]
		public System.Nullable<decimal> jixiaoMoney
		{
			get
			{
				return this._jixiaoMoney;
			}
			set
			{
				if ((this._jixiaoMoney != value))
				{
					this.OnjixiaoMoneyChanging(value);
					this.SendPropertyChanging();
					this._jixiaoMoney = value;
					this.SendPropertyChanged("jixiaoMoney");
					this.OnjixiaoMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_butieMoney", DbType="Money")]
		public System.Nullable<decimal> butieMoney
		{
			get
			{
				return this._butieMoney;
			}
			set
			{
				if ((this._butieMoney != value))
				{
					this.OnbutieMoneyChanging(value);
					this.SendPropertyChanging();
					this._butieMoney = value;
					this.SendPropertyChanged("butieMoney");
					this.OnbutieMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kouchuMoney", DbType="Money")]
		public System.Nullable<decimal> kouchuMoney
		{
			get
			{
				return this._kouchuMoney;
			}
			set
			{
				if ((this._kouchuMoney != value))
				{
					this.OnkouchuMoneyChanging(value);
					this.SendPropertyChanging();
					this._kouchuMoney = value;
					this.SendPropertyChanged("kouchuMoney");
					this.OnkouchuMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jiabanFei", DbType="Money")]
		public System.Nullable<decimal> jiabanFei
		{
			get
			{
				return this._jiabanFei;
			}
			set
			{
				if ((this._jiabanFei != value))
				{
					this.OnjiabanFeiChanging(value);
					this.SendPropertyChanging();
					this._jiabanFei = value;
					this.SendPropertyChanged("jiabanFei");
					this.OnjiabanFeiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qitaMoney", DbType="Money")]
		public System.Nullable<decimal> qitaMoney
		{
			get
			{
				return this._qitaMoney;
			}
			set
			{
				if ((this._qitaMoney != value))
				{
					this.OnqitaMoneyChanging(value);
					this.SendPropertyChanging();
					this._qitaMoney = value;
					this.SendPropertyChanged("qitaMoney");
					this.OnqitaMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFund", DbType="Money")]
		public System.Nullable<decimal> userFund
		{
			get
			{
				return this._userFund;
			}
			set
			{
				if ((this._userFund != value))
				{
					this.OnuserFundChanging(value);
					this.SendPropertyChanging();
					this._userFund = value;
					this.SendPropertyChanged("userFund");
					this.OnuserFundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userShebao", DbType="Money")]
		public System.Nullable<decimal> userShebao
		{
			get
			{
				return this._userShebao;
			}
			set
			{
				if ((this._userShebao != value))
				{
					this.OnuserShebaoChanging(value);
					this.SendPropertyChanging();
					this._userShebao = value;
					this.SendPropertyChanged("userShebao");
					this.OnuserShebaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pretaxsaraly", DbType="Money")]
		public System.Nullable<decimal> Pretaxsaraly
		{
			get
			{
				return this._Pretaxsaraly;
			}
			set
			{
				if ((this._Pretaxsaraly != value))
				{
					this.OnPretaxsaralyChanging(value);
					this.SendPropertyChanging();
					this._Pretaxsaraly = value;
					this.SendPropertyChanged("Pretaxsaraly");
					this.OnPretaxsaralyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usertax", DbType="Money")]
		public System.Nullable<decimal> usertax
		{
			get
			{
				return this._usertax;
			}
			set
			{
				if ((this._usertax != value))
				{
					this.OnusertaxChanging(value);
					this.SendPropertyChanging();
					this._usertax = value;
					this.SendPropertyChanged("usertax");
					this.OnusertaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealMoney", DbType="Money")]
		public System.Nullable<decimal> RealMoney
		{
			get
			{
				return this._RealMoney;
			}
			set
			{
				if ((this._RealMoney != value))
				{
					this.OnRealMoneyChanging(value);
					this.SendPropertyChanging();
					this._RealMoney = value;
					this.SendPropertyChanged("RealMoney");
					this.OnRealMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comFund", DbType="Money")]
		public System.Nullable<decimal> comFund
		{
			get
			{
				return this._comFund;
			}
			set
			{
				if ((this._comFund != value))
				{
					this.OncomFundChanging(value);
					this.SendPropertyChanging();
					this._comFund = value;
					this.SendPropertyChanged("comFund");
					this.OncomFundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comShebao", DbType="Money")]
		public System.Nullable<decimal> comShebao
		{
			get
			{
				return this._comShebao;
			}
			set
			{
				if ((this._comShebao != value))
				{
					this.OncomShebaoChanging(value);
					this.SendPropertyChanging();
					this._comShebao = value;
					this.SendPropertyChanged("comShebao");
					this.OncomShebaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(2000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_Saraly", Storage="_YearMonth", ThisKey="YearMonthID", OtherKey="YearMonthID", IsForeignKey=true)]
		public YearMonth YearMonth
		{
			get
			{
				return this._YearMonth.Entity;
			}
			set
			{
				YearMonth previousValue = this._YearMonth.Entity;
				if (((previousValue != value) 
							|| (this._YearMonth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearMonth.Entity = null;
						previousValue.Saraly.Remove(this);
					}
					this._YearMonth.Entity = value;
					if ((value != null))
					{
						value.Saraly.Add(this);
						this._YearMonthID = value.YearMonthID;
					}
					else
					{
						this._YearMonthID = default(int);
					}
					this.SendPropertyChanged("YearMonth");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCompany_Saraly", Storage="_UserCompany", ThisKey="userCompanyID", OtherKey="userCompanyID", IsForeignKey=true)]
		public UserCompany UserCompany
		{
			get
			{
				return this._UserCompany.Entity;
			}
			set
			{
				UserCompany previousValue = this._UserCompany.Entity;
				if (((previousValue != value) 
							|| (this._UserCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserCompany.Entity = null;
						previousValue.Saraly.Remove(this);
					}
					this._UserCompany.Entity = value;
					if ((value != null))
					{
						value.Saraly.Add(this);
						this._userCompanyID = value.userCompanyID;
					}
					else
					{
						this._userCompanyID = default(int);
					}
					this.SendPropertyChanged("UserCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmallArea")]
	public partial class SmallArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SmallAreaID;
		
		private string _SmallAreaName;
		
		private System.Nullable<int> _SortID;
		
		private System.Nullable<int> _CityZoneID;
		
		private string _RegionXY;
		
		private EntitySet<City> _City;
		
		private EntitySet<Company> _Company;
		
		private EntitySet<user> _user;
		
		private EntityRef<CityZone> _CityZone;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSmallAreaIDChanging(int value);
    partial void OnSmallAreaIDChanged();
    partial void OnSmallAreaNameChanging(string value);
    partial void OnSmallAreaNameChanged();
    partial void OnSortIDChanging(System.Nullable<int> value);
    partial void OnSortIDChanged();
    partial void OnCityZoneIDChanging(System.Nullable<int> value);
    partial void OnCityZoneIDChanged();
    partial void OnRegionXYChanging(string value);
    partial void OnRegionXYChanged();
    #endregion
		
		public SmallArea()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			this._user = new EntitySet<user>(new Action<user>(this.attach_user), new Action<user>(this.detach_user));
			this._CityZone = default(EntityRef<CityZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string SmallAreaName
		{
			get
			{
				return this._SmallAreaName;
			}
			set
			{
				if ((this._SmallAreaName != value))
				{
					this.OnSmallAreaNameChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaName = value;
					this.SendPropertyChanged("SmallAreaName");
					this.OnSmallAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortID", DbType="Int")]
		public System.Nullable<int> SortID
		{
			get
			{
				return this._SortID;
			}
			set
			{
				if ((this._SortID != value))
				{
					this.OnSortIDChanging(value);
					this.SendPropertyChanging();
					this._SortID = value;
					this.SendPropertyChanged("SortID");
					this.OnSortIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", DbType="Int")]
		public System.Nullable<int> CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					if (this._CityZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionXY", DbType="NVarChar(2000)")]
		public string RegionXY
		{
			get
			{
				return this._RegionXY;
			}
			set
			{
				if ((this._RegionXY != value))
				{
					this.OnRegionXYChanging(value);
					this.SendPropertyChanging();
					this._RegionXY = value;
					this.SendPropertyChanged("RegionXY");
					this.OnRegionXYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_City", Storage="_City", ThisKey="SmallAreaID", OtherKey="SmallAreaID")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_Company", Storage="_Company", ThisKey="SmallAreaID", OtherKey="SmallAreaID")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_user", Storage="_user", ThisKey="SmallAreaID", OtherKey="SmallAreaID")]
		public EntitySet<user> user
		{
			get
			{
				return this._user;
			}
			set
			{
				this._user.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_SmallArea", Storage="_CityZone", ThisKey="CityZoneID", OtherKey="CityZoneID", IsForeignKey=true)]
		public CityZone CityZone
		{
			get
			{
				return this._CityZone.Entity;
			}
			set
			{
				CityZone previousValue = this._CityZone.Entity;
				if (((previousValue != value) 
							|| (this._CityZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CityZone.Entity = null;
						previousValue.SmallArea.Remove(this);
					}
					this._CityZone.Entity = value;
					if ((value != null))
					{
						value.SmallArea.Add(this);
						this._CityZoneID = value.CityZoneID;
					}
					else
					{
						this._CityZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CityZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = null;
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = null;
		}
		
		private void attach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = this;
		}
		
		private void detach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.summary")]
	public partial class summary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _summaryID;
		
		private int _UsergroupID;
		
		private int _YearMonthID;
		
		private string _titleSum;
		
		private string _contentSum;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private string _keyword1;
		
		private string _keyword2;
		
		private string _keyword3;
		
		private string _userCompanyIDs;
		
		private EntityRef<Usergroup> _Usergroup;
		
		private EntityRef<YearMonth> _YearMonth;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsummaryIDChanging(int value);
    partial void OnsummaryIDChanged();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OntitleSumChanging(string value);
    partial void OntitleSumChanged();
    partial void OncontentSumChanging(string value);
    partial void OncontentSumChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void Onkeyword1Changing(string value);
    partial void Onkeyword1Changed();
    partial void Onkeyword2Changing(string value);
    partial void Onkeyword2Changed();
    partial void Onkeyword3Changing(string value);
    partial void Onkeyword3Changed();
    partial void OnuserCompanyIDsChanging(string value);
    partial void OnuserCompanyIDsChanged();
    #endregion
		
		public summary()
		{
			this._Usergroup = default(EntityRef<Usergroup>);
			this._YearMonth = default(EntityRef<YearMonth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_summaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int summaryID
		{
			get
			{
				return this._summaryID;
			}
			set
			{
				if ((this._summaryID != value))
				{
					this.OnsummaryIDChanging(value);
					this.SendPropertyChanging();
					this._summaryID = value;
					this.SendPropertyChanged("summaryID");
					this.OnsummaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", DbType="Int NOT NULL")]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					if (this._Usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", DbType="Int NOT NULL")]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					if (this._YearMonth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titleSum", DbType="VarChar(1000)")]
		public string titleSum
		{
			get
			{
				return this._titleSum;
			}
			set
			{
				if ((this._titleSum != value))
				{
					this.OntitleSumChanging(value);
					this.SendPropertyChanging();
					this._titleSum = value;
					this.SendPropertyChanged("titleSum");
					this.OntitleSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentSum", DbType="VarChar(MAX)")]
		public string contentSum
		{
			get
			{
				return this._contentSum;
			}
			set
			{
				if ((this._contentSum != value))
				{
					this.OncontentSumChanging(value);
					this.SendPropertyChanging();
					this._contentSum = value;
					this.SendPropertyChanged("contentSum");
					this.OncontentSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword1", DbType="VarChar(100)")]
		public string keyword1
		{
			get
			{
				return this._keyword1;
			}
			set
			{
				if ((this._keyword1 != value))
				{
					this.Onkeyword1Changing(value);
					this.SendPropertyChanging();
					this._keyword1 = value;
					this.SendPropertyChanged("keyword1");
					this.Onkeyword1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword2", DbType="VarChar(100)")]
		public string keyword2
		{
			get
			{
				return this._keyword2;
			}
			set
			{
				if ((this._keyword2 != value))
				{
					this.Onkeyword2Changing(value);
					this.SendPropertyChanging();
					this._keyword2 = value;
					this.SendPropertyChanged("keyword2");
					this.Onkeyword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword3", DbType="VarChar(100)")]
		public string keyword3
		{
			get
			{
				return this._keyword3;
			}
			set
			{
				if ((this._keyword3 != value))
				{
					this.Onkeyword3Changing(value);
					this.SendPropertyChanging();
					this._keyword3 = value;
					this.SendPropertyChanged("keyword3");
					this.Onkeyword3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyIDs", DbType="VarChar(1000)")]
		public string userCompanyIDs
		{
			get
			{
				return this._userCompanyIDs;
			}
			set
			{
				if ((this._userCompanyIDs != value))
				{
					this.OnuserCompanyIDsChanging(value);
					this.SendPropertyChanging();
					this._userCompanyIDs = value;
					this.SendPropertyChanged("userCompanyIDs");
					this.OnuserCompanyIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_summary", Storage="_Usergroup", ThisKey="UsergroupID", OtherKey="UsergroupID", IsForeignKey=true)]
		public Usergroup Usergroup
		{
			get
			{
				return this._Usergroup.Entity;
			}
			set
			{
				Usergroup previousValue = this._Usergroup.Entity;
				if (((previousValue != value) 
							|| (this._Usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usergroup.Entity = null;
						previousValue.summary.Remove(this);
					}
					this._Usergroup.Entity = value;
					if ((value != null))
					{
						value.summary.Add(this);
						this._UsergroupID = value.UsergroupID;
					}
					else
					{
						this._UsergroupID = default(int);
					}
					this.SendPropertyChanged("Usergroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_summary", Storage="_YearMonth", ThisKey="YearMonthID", OtherKey="YearMonthID", IsForeignKey=true)]
		public YearMonth YearMonth
		{
			get
			{
				return this._YearMonth.Entity;
			}
			set
			{
				YearMonth previousValue = this._YearMonth.Entity;
				if (((previousValue != value) 
							|| (this._YearMonth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearMonth.Entity = null;
						previousValue.summary.Remove(this);
					}
					this._YearMonth.Entity = value;
					if ((value != null))
					{
						value.summary.Add(this);
						this._YearMonthID = value.YearMonthID;
					}
					else
					{
						this._YearMonthID = default(int);
					}
					this.SendPropertyChanged("YearMonth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usergroup")]
	public partial class Usergroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsergroupID;
		
		private string _groupName;
		
		private System.Nullable<System.DateTime> _logdate;
		
		private System.Nullable<int> _userNum;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _createDate;
		
		private string _groupDecribe;
		
		private EntitySet<consumption> _consumption;
		
		private EntitySet<finan> _finan;
		
		private EntitySet<finanplan> _finanplan;
		
		private EntitySet<summary> _summary;
		
		private EntitySet<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OngroupNameChanging(string value);
    partial void OngroupNameChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    partial void OnuserNumChanging(System.Nullable<int> value);
    partial void OnuserNumChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreateDateChanged();
    partial void OngroupDecribeChanging(string value);
    partial void OngroupDecribeChanged();
    #endregion
		
		public Usergroup()
		{
			this._consumption = new EntitySet<consumption>(new Action<consumption>(this.attach_consumption), new Action<consumption>(this.detach_consumption));
			this._finan = new EntitySet<finan>(new Action<finan>(this.attach_finan), new Action<finan>(this.detach_finan));
			this._finanplan = new EntitySet<finanplan>(new Action<finanplan>(this.attach_finanplan), new Action<finanplan>(this.detach_finanplan));
			this._summary = new EntitySet<summary>(new Action<summary>(this.attach_summary), new Action<summary>(this.detach_summary));
			this._user = new EntitySet<user>(new Action<user>(this.attach_user), new Action<user>(this.detach_user));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupName", DbType="VarChar(200)")]
		public string groupName
		{
			get
			{
				return this._groupName;
			}
			set
			{
				if ((this._groupName != value))
				{
					this.OngroupNameChanging(value);
					this.SendPropertyChanging();
					this._groupName = value;
					this.SendPropertyChanged("groupName");
					this.OngroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logdate
		{
			get
			{
				return this._logdate;
			}
			set
			{
				if ((this._logdate != value))
				{
					this.OnlogdateChanging(value);
					this.SendPropertyChanging();
					this._logdate = value;
					this.SendPropertyChanged("logdate");
					this.OnlogdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userNum", DbType="Int")]
		public System.Nullable<int> userNum
		{
			get
			{
				return this._userNum;
			}
			set
			{
				if ((this._userNum != value))
				{
					this.OnuserNumChanging(value);
					this.SendPropertyChanging();
					this._userNum = value;
					this.SendPropertyChanged("userNum");
					this.OnuserNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(8000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if ((this._createDate != value))
				{
					this.OncreateDateChanging(value);
					this.SendPropertyChanging();
					this._createDate = value;
					this.SendPropertyChanged("createDate");
					this.OncreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupDecribe", DbType="VarChar(8000)")]
		public string groupDecribe
		{
			get
			{
				return this._groupDecribe;
			}
			set
			{
				if ((this._groupDecribe != value))
				{
					this.OngroupDecribeChanging(value);
					this.SendPropertyChanging();
					this._groupDecribe = value;
					this.SendPropertyChanged("groupDecribe");
					this.OngroupDecribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_consumption", Storage="_consumption", ThisKey="UsergroupID", OtherKey="UsergroupID")]
		public EntitySet<consumption> consumption
		{
			get
			{
				return this._consumption;
			}
			set
			{
				this._consumption.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_finan", Storage="_finan", ThisKey="UsergroupID", OtherKey="UsergroupID")]
		public EntitySet<finan> finan
		{
			get
			{
				return this._finan;
			}
			set
			{
				this._finan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_finanplan", Storage="_finanplan", ThisKey="UsergroupID", OtherKey="UsergroupID")]
		public EntitySet<finanplan> finanplan
		{
			get
			{
				return this._finanplan;
			}
			set
			{
				this._finanplan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_summary", Storage="_summary", ThisKey="UsergroupID", OtherKey="UsergroupID")]
		public EntitySet<summary> summary
		{
			get
			{
				return this._summary;
			}
			set
			{
				this._summary.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_user", Storage="_user", ThisKey="UsergroupID", OtherKey="UsergroupID")]
		public EntitySet<user> user
		{
			get
			{
				return this._user;
			}
			set
			{
				this._user.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = this;
		}
		
		private void detach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = null;
		}
		
		private void attach_finan(finan entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = this;
		}
		
		private void detach_finan(finan entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = null;
		}
		
		private void attach_finanplan(finanplan entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = this;
		}
		
		private void detach_finanplan(finanplan entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = null;
		}
		
		private void attach_summary(summary entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = this;
		}
		
		private void detach_summary(summary entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = null;
		}
		
		private void attach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = this;
		}
		
		private void detach_user(user entity)
		{
			this.SendPropertyChanging();
			entity.Usergroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.YearMonth")]
	public partial class YearMonth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearMonthID;
		
		private string _Yearsign;
		
		private string _Monthsign;
		
		private string _Yearmonthvalue;
		
		private EntitySet<consumption> _consumption;
		
		private EntitySet<finan> _finan;
		
		private EntitySet<finanplan> _finanplan;
		
		private EntitySet<Saraly> _Saraly;
		
		private EntitySet<summary> _summary;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearMonthIDChanging(int value);
    partial void OnYearMonthIDChanged();
    partial void OnYearsignChanging(string value);
    partial void OnYearsignChanged();
    partial void OnMonthsignChanging(string value);
    partial void OnMonthsignChanged();
    partial void OnYearmonthvalueChanging(string value);
    partial void OnYearmonthvalueChanged();
    #endregion
		
		public YearMonth()
		{
			this._consumption = new EntitySet<consumption>(new Action<consumption>(this.attach_consumption), new Action<consumption>(this.detach_consumption));
			this._finan = new EntitySet<finan>(new Action<finan>(this.attach_finan), new Action<finan>(this.detach_finan));
			this._finanplan = new EntitySet<finanplan>(new Action<finanplan>(this.attach_finanplan), new Action<finanplan>(this.detach_finanplan));
			this._Saraly = new EntitySet<Saraly>(new Action<Saraly>(this.attach_Saraly), new Action<Saraly>(this.detach_Saraly));
			this._summary = new EntitySet<summary>(new Action<summary>(this.attach_summary), new Action<summary>(this.detach_summary));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearMonthID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YearMonthID
		{
			get
			{
				return this._YearMonthID;
			}
			set
			{
				if ((this._YearMonthID != value))
				{
					this.OnYearMonthIDChanging(value);
					this.SendPropertyChanging();
					this._YearMonthID = value;
					this.SendPropertyChanged("YearMonthID");
					this.OnYearMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yearsign", DbType="VarChar(10)")]
		public string Yearsign
		{
			get
			{
				return this._Yearsign;
			}
			set
			{
				if ((this._Yearsign != value))
				{
					this.OnYearsignChanging(value);
					this.SendPropertyChanging();
					this._Yearsign = value;
					this.SendPropertyChanged("Yearsign");
					this.OnYearsignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monthsign", DbType="VarChar(10)")]
		public string Monthsign
		{
			get
			{
				return this._Monthsign;
			}
			set
			{
				if ((this._Monthsign != value))
				{
					this.OnMonthsignChanging(value);
					this.SendPropertyChanging();
					this._Monthsign = value;
					this.SendPropertyChanged("Monthsign");
					this.OnMonthsignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yearmonthvalue", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Yearmonthvalue
		{
			get
			{
				return this._Yearmonthvalue;
			}
			set
			{
				if ((this._Yearmonthvalue != value))
				{
					this.OnYearmonthvalueChanging(value);
					this.SendPropertyChanging();
					this._Yearmonthvalue = value;
					this.SendPropertyChanged("Yearmonthvalue");
					this.OnYearmonthvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_consumption", Storage="_consumption", ThisKey="YearMonthID", OtherKey="YearMonthID")]
		public EntitySet<consumption> consumption
		{
			get
			{
				return this._consumption;
			}
			set
			{
				this._consumption.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_finan", Storage="_finan", ThisKey="YearMonthID", OtherKey="YearMonthID")]
		public EntitySet<finan> finan
		{
			get
			{
				return this._finan;
			}
			set
			{
				this._finan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_finanplan", Storage="_finanplan", ThisKey="YearMonthID", OtherKey="YearMonthID")]
		public EntitySet<finanplan> finanplan
		{
			get
			{
				return this._finanplan;
			}
			set
			{
				this._finanplan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_Saraly", Storage="_Saraly", ThisKey="YearMonthID", OtherKey="YearMonthID")]
		public EntitySet<Saraly> Saraly
		{
			get
			{
				return this._Saraly;
			}
			set
			{
				this._Saraly.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearMonth_summary", Storage="_summary", ThisKey="YearMonthID", OtherKey="YearMonthID")]
		public EntitySet<summary> summary
		{
			get
			{
				return this._summary;
			}
			set
			{
				this._summary.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = this;
		}
		
		private void detach_consumption(consumption entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = null;
		}
		
		private void attach_finan(finan entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = this;
		}
		
		private void detach_finan(finan entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = null;
		}
		
		private void attach_finanplan(finanplan entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = this;
		}
		
		private void detach_finanplan(finanplan entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = null;
		}
		
		private void attach_Saraly(Saraly entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = this;
		}
		
		private void detach_Saraly(Saraly entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = null;
		}
		
		private void attach_summary(summary entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = this;
		}
		
		private void detach_summary(summary entity)
		{
			this.SendPropertyChanging();
			entity.YearMonth = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _UsergroupID;
		
		private string _UserCode;
		
		private string _UserName;
		
		private string _TrueName;
		
		private string _NickName;
		
		private string _UserPwd;
		
		private System.DateTime _LogDate;
		
		private System.DateTime _LastActive;
		
		private string _Email;
		
		private string _UserMobile;
		
		private System.Nullable<bool> _Usersex;
		
		private System.Nullable<int> _ProvinceID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _CityZoneID;
		
		private System.Nullable<int> _SmallAreaID;
		
		private string _Address;
		
		private string _BornDay;
		
		private string _BornYear;
		
		private string _BornMonth;
		
		private System.Nullable<System.DateTime> _BprthDay;
		
		private string _Guid;
		
		private System.Nullable<bool> _isActive;
		
		private string _HeadPic;
		
		private string _Remark;
		
		private string _UserQQ;
		
		private string _Weibo;
		
		private string _Weixin;
		
		private System.Nullable<int> _Logtime;
		
		private string _UserTel;
		
		private EntitySet<UserCompany> _UserCompany;
		
		private EntityRef<City> _City;
		
		private EntityRef<CityZone> _CityZone;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<SmallArea> _SmallArea;
		
		private EntityRef<Usergroup> _Usergroup;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsergroupIDChanging(int value);
    partial void OnUsergroupIDChanged();
    partial void OnUserCodeChanging(string value);
    partial void OnUserCodeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTrueNameChanging(string value);
    partial void OnTrueNameChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnUserPwdChanging(string value);
    partial void OnUserPwdChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnLastActiveChanging(System.DateTime value);
    partial void OnLastActiveChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserMobileChanging(string value);
    partial void OnUserMobileChanged();
    partial void OnUsersexChanging(System.Nullable<bool> value);
    partial void OnUsersexChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnCityZoneIDChanging(System.Nullable<int> value);
    partial void OnCityZoneIDChanged();
    partial void OnSmallAreaIDChanging(System.Nullable<int> value);
    partial void OnSmallAreaIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBornDayChanging(string value);
    partial void OnBornDayChanged();
    partial void OnBornYearChanging(string value);
    partial void OnBornYearChanged();
    partial void OnBornMonthChanging(string value);
    partial void OnBornMonthChanged();
    partial void OnBprthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBprthDayChanged();
    partial void OnGuidChanging(string value);
    partial void OnGuidChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    partial void OnHeadPicChanging(string value);
    partial void OnHeadPicChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnUserQQChanging(string value);
    partial void OnUserQQChanged();
    partial void OnWeiboChanging(string value);
    partial void OnWeiboChanged();
    partial void OnWeixinChanging(string value);
    partial void OnWeixinChanged();
    partial void OnLogtimeChanging(System.Nullable<int> value);
    partial void OnLogtimeChanged();
    partial void OnUserTelChanging(string value);
    partial void OnUserTelChanged();
    #endregion
		
		public user()
		{
			this._UserCompany = new EntitySet<UserCompany>(new Action<UserCompany>(this.attach_UserCompany), new Action<UserCompany>(this.detach_UserCompany));
			this._City = default(EntityRef<City>);
			this._CityZone = default(EntityRef<CityZone>);
			this._Province = default(EntityRef<Province>);
			this._SmallArea = default(EntityRef<SmallArea>);
			this._Usergroup = default(EntityRef<Usergroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsergroupID", DbType="Int NOT NULL")]
		public int UsergroupID
		{
			get
			{
				return this._UsergroupID;
			}
			set
			{
				if ((this._UsergroupID != value))
				{
					if (this._Usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsergroupIDChanging(value);
					this.SendPropertyChanging();
					this._UsergroupID = value;
					this.SendPropertyChanged("UsergroupID");
					this.OnUsergroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="VarChar(50)")]
		public string UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(200)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrueName", DbType="VarChar(200)")]
		public string TrueName
		{
			get
			{
				return this._TrueName;
			}
			set
			{
				if ((this._TrueName != value))
				{
					this.OnTrueNameChanging(value);
					this.SendPropertyChanging();
					this._TrueName = value;
					this.SendPropertyChanged("TrueName");
					this.OnTrueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(200)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPwd", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserPwd
		{
			get
			{
				return this._UserPwd;
			}
			set
			{
				if ((this._UserPwd != value))
				{
					this.OnUserPwdChanging(value);
					this.SendPropertyChanging();
					this._UserPwd = value;
					this.SendPropertyChanged("UserPwd");
					this.OnUserPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActive", DbType="DateTime NOT NULL")]
		public System.DateTime LastActive
		{
			get
			{
				return this._LastActive;
			}
			set
			{
				if ((this._LastActive != value))
				{
					this.OnLastActiveChanging(value);
					this.SendPropertyChanging();
					this._LastActive = value;
					this.SendPropertyChanged("LastActive");
					this.OnLastActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMobile", DbType="VarChar(20)")]
		public string UserMobile
		{
			get
			{
				return this._UserMobile;
			}
			set
			{
				if ((this._UserMobile != value))
				{
					this.OnUserMobileChanging(value);
					this.SendPropertyChanging();
					this._UserMobile = value;
					this.SendPropertyChanged("UserMobile");
					this.OnUserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usersex", DbType="Bit")]
		public System.Nullable<bool> Usersex
		{
			get
			{
				return this._Usersex;
			}
			set
			{
				if ((this._Usersex != value))
				{
					this.OnUsersexChanging(value);
					this.SendPropertyChanging();
					this._Usersex = value;
					this.SendPropertyChanged("Usersex");
					this.OnUsersexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", DbType="Int")]
		public System.Nullable<int> CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					if (this._CityZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", DbType="Int")]
		public System.Nullable<int> SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					if (this._SmallArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornDay", DbType="VarChar(10)")]
		public string BornDay
		{
			get
			{
				return this._BornDay;
			}
			set
			{
				if ((this._BornDay != value))
				{
					this.OnBornDayChanging(value);
					this.SendPropertyChanging();
					this._BornDay = value;
					this.SendPropertyChanged("BornDay");
					this.OnBornDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornYear", DbType="VarChar(10)")]
		public string BornYear
		{
			get
			{
				return this._BornYear;
			}
			set
			{
				if ((this._BornYear != value))
				{
					this.OnBornYearChanging(value);
					this.SendPropertyChanging();
					this._BornYear = value;
					this.SendPropertyChanged("BornYear");
					this.OnBornYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornMonth", DbType="VarChar(10)")]
		public string BornMonth
		{
			get
			{
				return this._BornMonth;
			}
			set
			{
				if ((this._BornMonth != value))
				{
					this.OnBornMonthChanging(value);
					this.SendPropertyChanging();
					this._BornMonth = value;
					this.SendPropertyChanged("BornMonth");
					this.OnBornMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BprthDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BprthDay
		{
			get
			{
				return this._BprthDay;
			}
			set
			{
				if ((this._BprthDay != value))
				{
					this.OnBprthDayChanging(value);
					this.SendPropertyChanging();
					this._BprthDay = value;
					this.SendPropertyChanged("BprthDay");
					this.OnBprthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="VarChar(100)")]
		public string Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadPic", DbType="VarChar(200)")]
		public string HeadPic
		{
			get
			{
				return this._HeadPic;
			}
			set
			{
				if ((this._HeadPic != value))
				{
					this.OnHeadPicChanging(value);
					this.SendPropertyChanging();
					this._HeadPic = value;
					this.SendPropertyChanged("HeadPic");
					this.OnHeadPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(8000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserQQ", DbType="VarChar(20)")]
		public string UserQQ
		{
			get
			{
				return this._UserQQ;
			}
			set
			{
				if ((this._UserQQ != value))
				{
					this.OnUserQQChanging(value);
					this.SendPropertyChanging();
					this._UserQQ = value;
					this.SendPropertyChanged("UserQQ");
					this.OnUserQQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weibo", DbType="VarChar(200)")]
		public string Weibo
		{
			get
			{
				return this._Weibo;
			}
			set
			{
				if ((this._Weibo != value))
				{
					this.OnWeiboChanging(value);
					this.SendPropertyChanging();
					this._Weibo = value;
					this.SendPropertyChanged("Weibo");
					this.OnWeiboChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weixin", DbType="VarChar(200)")]
		public string Weixin
		{
			get
			{
				return this._Weixin;
			}
			set
			{
				if ((this._Weixin != value))
				{
					this.OnWeixinChanging(value);
					this.SendPropertyChanging();
					this._Weixin = value;
					this.SendPropertyChanged("Weixin");
					this.OnWeixinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logtime", DbType="Int")]
		public System.Nullable<int> Logtime
		{
			get
			{
				return this._Logtime;
			}
			set
			{
				if ((this._Logtime != value))
				{
					this.OnLogtimeChanging(value);
					this.SendPropertyChanging();
					this._Logtime = value;
					this.SendPropertyChanged("Logtime");
					this.OnLogtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTel", DbType="VarChar(50)")]
		public string UserTel
		{
			get
			{
				return this._UserTel;
			}
			set
			{
				if ((this._UserTel != value))
				{
					this.OnUserTelChanging(value);
					this.SendPropertyChanging();
					this._UserTel = value;
					this.SendPropertyChanged("UserTel");
					this.OnUserTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_UserCompany", Storage="_UserCompany", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserCompany> UserCompany
		{
			get
			{
				return this._UserCompany;
			}
			set
			{
				this._UserCompany.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_user", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.user.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.user.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_user", Storage="_CityZone", ThisKey="CityZoneID", OtherKey="CityZoneID", IsForeignKey=true)]
		public CityZone CityZone
		{
			get
			{
				return this._CityZone.Entity;
			}
			set
			{
				CityZone previousValue = this._CityZone.Entity;
				if (((previousValue != value) 
							|| (this._CityZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CityZone.Entity = null;
						previousValue.user.Remove(this);
					}
					this._CityZone.Entity = value;
					if ((value != null))
					{
						value.user.Add(this);
						this._CityZoneID = value.CityZoneID;
					}
					else
					{
						this._CityZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CityZone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_user", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.user.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.user.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_user", Storage="_SmallArea", ThisKey="SmallAreaID", OtherKey="SmallAreaID", IsForeignKey=true)]
		public SmallArea SmallArea
		{
			get
			{
				return this._SmallArea.Entity;
			}
			set
			{
				SmallArea previousValue = this._SmallArea.Entity;
				if (((previousValue != value) 
							|| (this._SmallArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SmallArea.Entity = null;
						previousValue.user.Remove(this);
					}
					this._SmallArea.Entity = value;
					if ((value != null))
					{
						value.user.Add(this);
						this._SmallAreaID = value.SmallAreaID;
					}
					else
					{
						this._SmallAreaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SmallArea");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usergroup_user", Storage="_Usergroup", ThisKey="UsergroupID", OtherKey="UsergroupID", IsForeignKey=true)]
		public Usergroup Usergroup
		{
			get
			{
				return this._Usergroup.Entity;
			}
			set
			{
				Usergroup previousValue = this._Usergroup.Entity;
				if (((previousValue != value) 
							|| (this._Usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usergroup.Entity = null;
						previousValue.user.Remove(this);
					}
					this._Usergroup.Entity = value;
					if ((value != null))
					{
						value.user.Add(this);
						this._UsergroupID = value.UsergroupID;
					}
					else
					{
						this._UsergroupID = default(int);
					}
					this.SendPropertyChanged("Usergroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCompany(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_UserCompany(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCompany")]
	public partial class UserCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userCompanyID;
		
		private int _CompanyID;
		
		private int _UserID;
		
		private string _station;
		
		private System.Nullable<System.DateTime> _joinDate;
		
		private System.Nullable<System.DateTime> _logDate;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _leaveDate;
		
		private System.Nullable<bool> _iscurrent;
		
		private EntitySet<Saraly> _Saraly;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserCompanyIDChanging(int value);
    partial void OnuserCompanyIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnstationChanging(string value);
    partial void OnstationChanged();
    partial void OnjoinDateChanging(System.Nullable<System.DateTime> value);
    partial void OnjoinDateChanged();
    partial void OnlogDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogDateChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnleaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnleaveDateChanged();
    partial void OniscurrentChanging(System.Nullable<bool> value);
    partial void OniscurrentChanged();
    #endregion
		
		public UserCompany()
		{
			this._Saraly = new EntitySet<Saraly>(new Action<Saraly>(this.attach_Saraly), new Action<Saraly>(this.detach_Saraly));
			this._Company = default(EntityRef<Company>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userCompanyID
		{
			get
			{
				return this._userCompanyID;
			}
			set
			{
				if ((this._userCompanyID != value))
				{
					this.OnuserCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._userCompanyID = value;
					this.SendPropertyChanged("userCompanyID");
					this.OnuserCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_station", DbType="VarChar(200)")]
		public string station
		{
			get
			{
				return this._station;
			}
			set
			{
				if ((this._station != value))
				{
					this.OnstationChanging(value);
					this.SendPropertyChanging();
					this._station = value;
					this.SendPropertyChanged("station");
					this.OnstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_joinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> joinDate
		{
			get
			{
				return this._joinDate;
			}
			set
			{
				if ((this._joinDate != value))
				{
					this.OnjoinDateChanging(value);
					this.SendPropertyChanging();
					this._joinDate = value;
					this.SendPropertyChanged("joinDate");
					this.OnjoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> logDate
		{
			get
			{
				return this._logDate;
			}
			set
			{
				if ((this._logDate != value))
				{
					this.OnlogDateChanging(value);
					this.SendPropertyChanging();
					this._logDate = value;
					this.SendPropertyChanged("logDate");
					this.OnlogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remark", DbType="VarChar(200)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> leaveDate
		{
			get
			{
				return this._leaveDate;
			}
			set
			{
				if ((this._leaveDate != value))
				{
					this.OnleaveDateChanging(value);
					this.SendPropertyChanging();
					this._leaveDate = value;
					this.SendPropertyChanged("leaveDate");
					this.OnleaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iscurrent", DbType="Bit")]
		public System.Nullable<bool> iscurrent
		{
			get
			{
				return this._iscurrent;
			}
			set
			{
				if ((this._iscurrent != value))
				{
					this.OniscurrentChanging(value);
					this.SendPropertyChanging();
					this._iscurrent = value;
					this.SendPropertyChanged("iscurrent");
					this.OniscurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCompany_Saraly", Storage="_Saraly", ThisKey="userCompanyID", OtherKey="userCompanyID")]
		public EntitySet<Saraly> Saraly
		{
			get
			{
				return this._Saraly;
			}
			set
			{
				this._Saraly.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserCompany", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.UserCompany.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.UserCompany.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_UserCompany", Storage="_user", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.UserCompany.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.UserCompany.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saraly(Saraly entity)
		{
			this.SendPropertyChanging();
			entity.UserCompany = this;
		}
		
		private void detach_Saraly(Saraly entity)
		{
			this.SendPropertyChanging();
			entity.UserCompany = null;
		}
	}
}
#pragma warning restore 1591
