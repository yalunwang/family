#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dataacess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Address")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCityZone(CityZone instance);
    partial void UpdateCityZone(CityZone instance);
    partial void DeleteCityZone(CityZone instance);
    partial void InsertSmallArea(SmallArea instance);
    partial void UpdateSmallArea(SmallArea instance);
    partial void DeleteSmallArea(SmallArea instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Dataacess.Properties.Settings.Default.AddressConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Province> Province
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<CityZone> CityZone
		{
			get
			{
				return this.GetTable<CityZone>();
			}
		}
		
		public System.Data.Linq.Table<SmallArea> SmallArea
		{
			get
			{
				return this.GetTable<SmallArea>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceID;
		
		private string _ProvinceName;
		
		private string _MapFile;
		
		private System.Nullable<int> _CountryID;
		
		private string _Pingyin;
		
		private string _ProvinceCode;
		
		private EntitySet<City> _City;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnProvinceCodeChanging(string value);
    partial void OnProvinceCodeChanged();
    #endregion
		
		public Province()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceCode", DbType="VarChar(50)")]
		public string ProvinceCode
		{
			get
			{
				return this._ProvinceCode;
			}
			set
			{
				if ((this._ProvinceCode != value))
				{
					this.OnProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._ProvinceCode = value;
					this.SendPropertyChanged("ProvinceCode");
					this.OnProvinceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_City", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private int _ProvinceID;
		
		private string _AreaCode;
		
		private string _IP;
		
		private string _MapFile;
		
		private string _Pingyin;
		
		private System.Nullable<int> _SmallAreaID;
		
		private string _CityCode;
		
		private EntitySet<CityZone> _CityZone;
		
		private EntityRef<Province> _Province;
		
		private EntityRef<SmallArea> _SmallArea;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnSmallAreaIDChanging(System.Nullable<int> value);
    partial void OnSmallAreaIDChanged();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    #endregion
		
		public City()
		{
			this._CityZone = new EntitySet<CityZone>(new Action<CityZone>(this.attach_CityZone), new Action<CityZone>(this.detach_CityZone));
			this._Province = default(EntityRef<Province>);
			this._SmallArea = default(EntityRef<SmallArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="VarChar(50)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(20)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", DbType="Int")]
		public System.Nullable<int> SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					if (this._SmallArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityCode", DbType="VarChar(50)")]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_CityZone", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<CityZone> CityZone
		{
			get
			{
				return this._CityZone;
			}
			set
			{
				this._CityZone.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.City.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_City", Storage="_SmallArea", ThisKey="SmallAreaID", OtherKey="SmallAreaID", IsForeignKey=true)]
		public SmallArea SmallArea
		{
			get
			{
				return this._SmallArea.Entity;
			}
			set
			{
				SmallArea previousValue = this._SmallArea.Entity;
				if (((previousValue != value) 
							|| (this._SmallArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SmallArea.Entity = null;
						previousValue.City.Remove(this);
					}
					this._SmallArea.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._SmallAreaID = value.SmallAreaID;
					}
					else
					{
						this._SmallAreaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SmallArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CityZone(CityZone entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_CityZone(CityZone entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityZone")]
	public partial class CityZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityZoneID;
		
		private int _CityID;
		
		private string _CityZoneName;
		
		private string _IP;
		
		private string _MapFile;
		
		private string _Pingyin;
		
		private string _CityZoneCode;
		
		private EntitySet<SmallArea> _SmallArea;
		
		private EntityRef<City> _City;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityZoneIDChanging(int value);
    partial void OnCityZoneIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityZoneNameChanging(string value);
    partial void OnCityZoneNameChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnMapFileChanging(string value);
    partial void OnMapFileChanged();
    partial void OnPingyinChanging(string value);
    partial void OnPingyinChanged();
    partial void OnCityZoneCodeChanging(string value);
    partial void OnCityZoneCodeChanged();
    #endregion
		
		public CityZone()
		{
			this._SmallArea = new EntitySet<SmallArea>(new Action<SmallArea>(this.attach_SmallArea), new Action<SmallArea>(this.detach_SmallArea));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string CityZoneName
		{
			get
			{
				return this._CityZoneName;
			}
			set
			{
				if ((this._CityZoneName != value))
				{
					this.OnCityZoneNameChanging(value);
					this.SendPropertyChanging();
					this._CityZoneName = value;
					this.SendPropertyChanged("CityZoneName");
					this.OnCityZoneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(10)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapFile", DbType="VarChar(200)")]
		public string MapFile
		{
			get
			{
				return this._MapFile;
			}
			set
			{
				if ((this._MapFile != value))
				{
					this.OnMapFileChanging(value);
					this.SendPropertyChanging();
					this._MapFile = value;
					this.SendPropertyChanged("MapFile");
					this.OnMapFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pingyin", DbType="VarChar(400)")]
		public string Pingyin
		{
			get
			{
				return this._Pingyin;
			}
			set
			{
				if ((this._Pingyin != value))
				{
					this.OnPingyinChanging(value);
					this.SendPropertyChanging();
					this._Pingyin = value;
					this.SendPropertyChanged("Pingyin");
					this.OnPingyinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneCode", DbType="VarChar(50)")]
		public string CityZoneCode
		{
			get
			{
				return this._CityZoneCode;
			}
			set
			{
				if ((this._CityZoneCode != value))
				{
					this.OnCityZoneCodeChanging(value);
					this.SendPropertyChanging();
					this._CityZoneCode = value;
					this.SendPropertyChanged("CityZoneCode");
					this.OnCityZoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_SmallArea", Storage="_SmallArea", ThisKey="CityZoneID", OtherKey="CityZoneID")]
		public EntitySet<SmallArea> SmallArea
		{
			get
			{
				return this._SmallArea;
			}
			set
			{
				this._SmallArea.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.CityZone.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.CityZone.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SmallArea(SmallArea entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = this;
		}
		
		private void detach_SmallArea(SmallArea entity)
		{
			this.SendPropertyChanging();
			entity.CityZone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmallArea")]
	public partial class SmallArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SmallAreaID;
		
		private string _SmallAreaName;
		
		private System.Nullable<int> _SortID;
		
		private System.Nullable<int> _CityZoneID;
		
		private string _RegionXY;
		
		private EntitySet<City> _City;
		
		private EntityRef<CityZone> _CityZone;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSmallAreaIDChanging(int value);
    partial void OnSmallAreaIDChanged();
    partial void OnSmallAreaNameChanging(string value);
    partial void OnSmallAreaNameChanged();
    partial void OnSortIDChanging(System.Nullable<int> value);
    partial void OnSortIDChanged();
    partial void OnCityZoneIDChanging(System.Nullable<int> value);
    partial void OnCityZoneIDChanged();
    partial void OnRegionXYChanging(string value);
    partial void OnRegionXYChanged();
    #endregion
		
		public SmallArea()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			this._CityZone = default(EntityRef<CityZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SmallAreaID
		{
			get
			{
				return this._SmallAreaID;
			}
			set
			{
				if ((this._SmallAreaID != value))
				{
					this.OnSmallAreaIDChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaID = value;
					this.SendPropertyChanged("SmallAreaID");
					this.OnSmallAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallAreaName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string SmallAreaName
		{
			get
			{
				return this._SmallAreaName;
			}
			set
			{
				if ((this._SmallAreaName != value))
				{
					this.OnSmallAreaNameChanging(value);
					this.SendPropertyChanging();
					this._SmallAreaName = value;
					this.SendPropertyChanged("SmallAreaName");
					this.OnSmallAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortID", DbType="Int")]
		public System.Nullable<int> SortID
		{
			get
			{
				return this._SortID;
			}
			set
			{
				if ((this._SortID != value))
				{
					this.OnSortIDChanging(value);
					this.SendPropertyChanging();
					this._SortID = value;
					this.SendPropertyChanged("SortID");
					this.OnSortIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityZoneID", DbType="Int")]
		public System.Nullable<int> CityZoneID
		{
			get
			{
				return this._CityZoneID;
			}
			set
			{
				if ((this._CityZoneID != value))
				{
					if (this._CityZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityZoneIDChanging(value);
					this.SendPropertyChanging();
					this._CityZoneID = value;
					this.SendPropertyChanged("CityZoneID");
					this.OnCityZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionXY", DbType="NVarChar(2000)")]
		public string RegionXY
		{
			get
			{
				return this._RegionXY;
			}
			set
			{
				if ((this._RegionXY != value))
				{
					this.OnRegionXYChanging(value);
					this.SendPropertyChanging();
					this._RegionXY = value;
					this.SendPropertyChanged("RegionXY");
					this.OnRegionXYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmallArea_City", Storage="_City", ThisKey="SmallAreaID", OtherKey="SmallAreaID")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_SmallArea", Storage="_CityZone", ThisKey="CityZoneID", OtherKey="CityZoneID", IsForeignKey=true)]
		public CityZone CityZone
		{
			get
			{
				return this._CityZone.Entity;
			}
			set
			{
				CityZone previousValue = this._CityZone.Entity;
				if (((previousValue != value) 
							|| (this._CityZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CityZone.Entity = null;
						previousValue.SmallArea.Remove(this);
					}
					this._CityZone.Entity = value;
					if ((value != null))
					{
						value.SmallArea.Add(this);
						this._CityZoneID = value.CityZoneID;
					}
					else
					{
						this._CityZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CityZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.SmallArea = null;
		}
	}
}
#pragma warning restore 1591
